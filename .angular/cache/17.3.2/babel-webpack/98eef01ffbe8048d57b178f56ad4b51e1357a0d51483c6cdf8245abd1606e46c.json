{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { forkJoin } from 'rxjs';\nimport { Role } from '../_models';\nlet StockListComponent = class StockListComponent {\n  constructor(stockService, itemService, locationService, router, accountService) {\n    this.stockService = stockService;\n    this.itemService = itemService;\n    this.locationService = locationService;\n    this.router = router;\n    this.accountService = accountService;\n    this.Role = Role;\n    this.stocks = [];\n    this.itemsMap = {};\n    this.totalItems = 0;\n    this.totalInventoryPrice = 0;\n    this.availableStockMap = {};\n    // Make Object.keys available in template\n    this.Object = Object;\n    // Modal and selection properties\n    this.showDisposeModal = false;\n    this.selectedDisposeItems = [];\n    this.itemsWithStock = [];\n    this.locations = [];\n    this.loading = false;\n    this.modalLoading = false;\n    this.disposeForm = {\n      locationId: '',\n      price: 0,\n      remarks: ''\n    };\n  }\n  ngOnInit() {\n    // Load items first to map itemId â†’ item name\n    this.itemService.getAll().subscribe(items => {\n      this.itemsMap = items.reduce((map, item) => {\n        map[item.id] = item.name;\n        return map;\n      }, {});\n      this.loadStocks();\n      this.loadAvailableStock();\n    });\n  }\n  loadStocks() {\n    this.stockService.getAll().subscribe({\n      next: stocks => {\n        this.stocks = stocks;\n        this.calculateTotals();\n        this.loadAvailableStock(); // Reload available stock after stocks are loaded\n      },\n      error: error => {\n        console.error('Error fetching stocks:', error);\n      }\n    });\n  }\n  getItemName(itemId) {\n    return this.itemsMap[itemId] || 'Unknown';\n  }\n  getLocationName(stock) {\n    return stock.location ? stock.location.name : 'No Location';\n  }\n  calculateTotals() {\n    // Sum total items and inventory value\n    this.totalItems = this.stocks.reduce((sum, s) => sum + (s.quantity || 0), 0);\n    this.totalInventoryPrice = this.stocks.reduce((sum, s) => sum + (s.price || 0) * (s.quantity || 0), 0);\n  }\n  getCategoryName(stock) {\n    return stock.item?.category?.name || 'No Category';\n  }\n  getBrandName(stock) {\n    return stock.item?.brand?.name || 'No Brand';\n  }\n  viewStock(id) {\n    this.router.navigate(['/stocks/view', id]);\n  }\n  editStock(id) {\n    this.router.navigate(['/stocks/edit', id]);\n  }\n  deleteStock(id) {\n    if (confirm('Are you sure you want to delete this stock record?')) {\n      this.stockService.delete(id).subscribe(() => this.loadStocks());\n    }\n  }\n  loadAvailableStock() {\n    // Get unique item IDs from stocks\n    const itemIds = [...new Set(this.stocks.map(stock => stock.itemId))];\n    // Load available stock for each item\n    itemIds.forEach(itemId => {\n      this.stockService.getAvailableStock(itemId).subscribe({\n        next: data => {\n          this.availableStockMap[itemId] = data.availableStock;\n        },\n        error: error => {\n          console.error('Error loading available stock for item', itemId, error);\n        }\n      });\n    });\n  }\n  // Calculate available stock for a specific item based on all its stock operations\n  calculateAvailableStockForItem(itemId) {\n    const itemStocks = this.stocks.filter(stock => stock.itemId === itemId);\n    let availableStock = 0;\n    itemStocks.forEach(stock => {\n      if (stock.type === 'ADD') {\n        availableStock += stock.quantity;\n      } else if (stock.type === 'DISPOSE') {\n        availableStock -= stock.quantity;\n      }\n    });\n    // Ensure stock doesn't go negative\n    return Math.max(0, availableStock);\n  }\n  getAvailableStock(itemId) {\n    return this.availableStockMap[itemId] || 0;\n  }\n  getItemsWithAvailableStock() {\n    const uniqueItemIds = [...new Set(this.stocks.map(stock => stock.itemId))];\n    return uniqueItemIds.filter(itemId => this.calculateAvailableStockForItem(itemId) > 0).length;\n  }\n  hasRole(roles) {\n    const account = this.accountService.accountValue;\n    if (!account) return false;\n    return roles.some(role => role === account.role);\n  }\n  // Modal methods\n  openDisposeModal() {\n    this.showDisposeModal = true;\n    this.loadItemsWithStock();\n    this.loadLocations();\n  }\n  closeDisposeModal() {\n    this.showDisposeModal = false;\n    this.selectedDisposeItems = [];\n    this.disposeForm = {\n      locationId: '',\n      price: 0,\n      remarks: ''\n    };\n  }\n  loadItemsWithStock() {\n    // Get unique items that have available stock\n    const uniqueItems = new Map();\n    this.stocks.forEach(stock => {\n      const availableStock = this.calculateAvailableStockForItem(stock.itemId);\n      if (availableStock > 0) {\n        const itemKey = `${stock.itemId}-${stock.item?.name}`;\n        if (!uniqueItems.has(itemKey)) {\n          uniqueItems.set(itemKey, {\n            id: stock.itemId,\n            name: stock.item?.name || 'Unknown Item',\n            category: stock.item?.category?.name || 'No Category',\n            brand: stock.item?.brand?.name || 'No Brand',\n            availableStock: availableStock\n          });\n        }\n      }\n    });\n    this.itemsWithStock = Array.from(uniqueItems.values());\n    // Show message if no items available\n    if (this.itemsWithStock.length === 0) {\n      alert('No items with available stock found');\n      this.closeDisposeModal();\n    }\n  }\n  loadLocations() {\n    this.locationService.getAll().subscribe(locations => {\n      this.locations = locations;\n    });\n  }\n  toggleDisposeItemSelection(item) {\n    const index = this.selectedDisposeItems.findIndex(i => i.id === item.id);\n    if (index > -1) {\n      this.selectedDisposeItems.splice(index, 1);\n    } else {\n      this.selectedDisposeItems.push(item);\n    }\n  }\n  isDisposeItemSelected(item) {\n    return this.selectedDisposeItems.some(i => i.id === item.id);\n  }\n  disposeSelectedItems() {\n    if (this.selectedDisposeItems.length === 0) {\n      alert('Please select items to dispose');\n      return;\n    }\n    if (!this.disposeForm.locationId) {\n      alert('Please select a location');\n      return;\n    }\n    if (!confirm(`Are you sure you want to dispose the selected items?`)) {\n      return;\n    }\n    this.modalLoading = true;\n    // Create dispose entries for each selected item\n    const disposeObservables = this.selectedDisposeItems.map(item => {\n      const disposeData = {\n        itemId: item.id,\n        quantity: item.availableStock,\n        type: 'DISPOSE',\n        locationId: this.disposeForm.locationId,\n        price: this.disposeForm.price,\n        remarks: this.disposeForm.remarks\n      };\n      return this.stockService.create(disposeData);\n    });\n    // Use forkJoin for parallel execution\n    forkJoin(disposeObservables).subscribe({\n      next: () => {\n        alert('Items disposed successfully');\n        this.closeDisposeModal();\n        this.loadStocks();\n      },\n      error: error => {\n        console.error('Error disposing items:', error);\n        alert('Error disposing items');\n        this.modalLoading = false;\n      },\n      complete: () => {\n        this.modalLoading = false;\n      }\n    });\n  }\n  toggleAllDisposeItems(event) {\n    if (event.target.checked) {\n      this.selectedDisposeItems = [...this.itemsWithStock];\n    } else {\n      this.selectedDisposeItems = [];\n    }\n  }\n};\nStockListComponent = __decorate([Component({\n  selector: 'app-stock-list',\n  templateUrl: './stock-list.component.html'\n})], StockListComponent);\nexport { StockListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}