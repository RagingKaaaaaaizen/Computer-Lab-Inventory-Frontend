{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet DisposeComponent = class DisposeComponent {\n  constructor(formBuilder, router, disposeService, itemService, locationService, alertService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.disposeService = disposeService;\n    this.itemService = itemService;\n    this.locationService = locationService;\n    this.alertService = alertService;\n    this.items = [];\n    this.locations = [];\n    this.selectedItem = null;\n    this.availableStock = 0;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      itemId: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]],\n      disposalValue: [0, [Validators.required, Validators.min(0)]],\n      locationId: ['', Validators.required],\n      reason: ['']\n    });\n    this.loadItems();\n    this.loadLocations();\n    // Listen for item changes to update available stock\n    this.form.get('itemId')?.valueChanges.subscribe(itemId => {\n      if (itemId) {\n        this.loadAvailableStock(itemId);\n      }\n    });\n  }\n  loadItems() {\n    this.itemService.getAll().subscribe(items => {\n      this.items = items.map(i => ({\n        id: i.id,\n        name: `${i.name} (${i.category?.name || 'No Category'})`\n      }));\n    });\n  }\n  loadLocations() {\n    this.locationService.getAll().subscribe(locations => {\n      this.locations = locations;\n    });\n  }\n  loadAvailableStock(itemId) {\n    this.disposeService.validateDisposal(itemId, 1).subscribe({\n      next: validation => {\n        this.availableStock = validation.availableStock;\n        this.selectedItem = this.items.find(item => item.id === itemId);\n        // Auto-set quantity to available stock if it's greater than 0\n        if (this.availableStock > 0) {\n          this.form.patchValue({\n            quantity: this.availableStock\n          });\n        } else {\n          this.form.patchValue({\n            quantity: 0\n          });\n        }\n      },\n      error: error => {\n        this.alertService.error('Error loading available stock');\n        console.error('Error loading available stock:', error);\n      }\n    });\n  }\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n    const disposeQuantity = this.form.value.quantity;\n    if (disposeQuantity > this.availableStock) {\n      this.alertService.error(`Cannot dispose ${disposeQuantity} items. Only ${this.availableStock} items available.`);\n      return;\n    }\n    this.loading = true;\n    const disposeData = {\n      ...this.form.value,\n      disposalDate: new Date()\n    };\n    this.disposeService.create(disposeData).subscribe({\n      next: () => {\n        this.alertService.success('Items disposed successfully', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['/stocks']);\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n  disposeAll() {\n    if (!this.form.value.itemId) {\n      this.alertService.error('Please select an item first');\n      return;\n    }\n    if (this.availableStock <= 0) {\n      this.alertService.error('No stock available to dispose');\n      return;\n    }\n    if (!confirm(`Are you sure you want to dispose ALL ${this.availableStock} available items?`)) {\n      return;\n    }\n    this.loading = true;\n    // Set quantity to available stock\n    this.form.patchValue({\n      quantity: this.availableStock\n    });\n    const disposeData = {\n      ...this.form.value,\n      disposalDate: new Date()\n    };\n    this.disposeService.create(disposeData).subscribe({\n      next: () => {\n        this.alertService.success(`All ${this.availableStock} items disposed successfully`, {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['/stocks']);\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nDisposeComponent = __decorate([Component({\n  selector: 'app-dispose',\n  templateUrl: './dispose.component.html'\n})], DisposeComponent);\nexport { DisposeComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}